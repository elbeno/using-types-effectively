#    -*- mode: org -*-
#+OPTIONS: reveal_center:t reveal_progress:t reveal_history:t reveal_control:nil
#+OPTIONS: reveal_rolling_links:nil reveal_keyboard:t reveal_overview:t num:nil
#+OPTIONS: reveal_width:1200 reveal_height:900
#+OPTIONS: toc:nil reveal_slide_number:"c/t"
#+REVEAL_MARGIN: 0.1
#+REVEAL_MIN_SCALE: 0.5
#+REVEAL_MAX_SCALE: 2.5
#+REVEAL_TRANS: none
#+REVEAL_THEME: solarized
#+REVEAL_HLEVEL: 1
#+REVEAL_EXTRA_CSS: ./presentation.css
#+REVEAL_ROOT: ../reveal.js/

# (setq org-reveal-title-slide-template "<h1>%t</h1><h2>%a</h2><h3>%e / <a href=\"http://twitter.com/ben_deane\">@ben_deane</a></h3><h2>%d</h2>")

#+TITLE: Using Types Effectively
#+AUTHOR: Ben Deane
#+EMAIL: bdeane@blizzard.com
#+DATE: Sometime 2016

#+REVEAL_HTML: <script type="text/javascript" src="./presentation.js"></script>

* What does that mean?
#+REVEAL_HTML: </br>
The recent evolution of C++ is (from one point of view) largely about
*strengthening* and *expanding* the *capabilities for dealing with types*.

#+ATTR_REVEAL: :frag (appear)
 - expansion of ~type_traits~
 - ~decltype~ to utter types
 - ~auto~ to preserve types, prevent conversions, infer return types
 - ~nullptr~ to prevent ~int~ / pointer confusion
 - scoped ~enum~
 - GSL: ~owner<T>~, ~not_null<T>~
 - Concepts TS

#+BEGIN_NOTES
Some of the features added to modern C++ to deal with types.

Obviously someone thinks that types are important. And the ability to wrangle
them and mould them to our purposes is an important part of C++.

Types are the currency of metaprogramming, but also important for safety in
"regular" programming; hence we see things like the GSL's ~owner<>~ and ~not_null<>~.
#+END_NOTES

* FP isn't (only) about
#+REVEAL_HTML: </br>
#+ATTR_REVEAL: :frag (appear)
 - first class functions
 - higher order functions
 - lexical scoping, closures
 - pattern matching
 - value semantics
 - immutability
 - concurrency through immutability
 - laziness
 - garbage collection
 - boxed data types / "inefficient" runtime models

#+BEGIN_NOTES
Functional languages can teach us a thing or two about types. (After all, they
seem to be teaching us everything else.)

Here are some things you may think of when functional programming is mentioned...
#+END_NOTES

* FP is (also, importantly) about
#+REVEAL_HTML: </br>
#+ATTR_REVEAL: :frag (appear)
 - using types effectively and expressively
 - making illegal states unrepresentable
 - making illegal behaviour result in a type error
 - using total functions for easier to use, harder to misuse interfaces

#+BEGIN_NOTES
These aspects of functional programming are often overlooked.

Many functional languages have well-developed, expressive type systems.

C++ is moving in that direction.
#+END_NOTES

* Why does C++ have a type system?
#+REVEAL_HTML: </br>
#+ATTR_REVEAL: :frag (appear appear appear appear) :frag_idx (1 2 3 4)
 - to help programmers?
 - to hinder programmers?
 - because objects?
 - for the compiler's benefit?
#+REVEAL_HTML: </br></br>
#+ATTR_REVEAL: :frag appear :frag_idx 5
What has a type system ever done for us?
#+REVEAL_HTML: <small>
#+ATTR_REVEAL: :frag appear :frag_idx 5
(...apart from the sanitation, the medicine, education, wine, public order,
irrigation, roads, the fresh-water system, and public health...)
#+REVEAL_HTML: </small>

#+BEGIN_NOTES
C++ has a stronger type system than C. Why?

Is it so the compiler can complain about signed/unsigned comparisons?
#+END_NOTES

* Why does C have a type system?
#+REVEAL_HTML: </br><div align="left">
"The machines on which we first used BCPL and then B were word-addressed, and
these languages' single data type, the 'cell,' comfortably equated with the
hardware machine word. The advent of the PDP-11 exposed several inadequacies of
B's semantic model.

First, its character-handling mechanisms were clumsy. Second, although the
original PDP-11 did not provide for floating-point arithmetic, the manufacturer
promised that it would soon be available. Finally, the B and BCPL model implied
overhead in dealing with pointers.

For all these reasons, it seemed that a typing scheme was necessary. Other
issues, particularly type safety and interface checking, did not seem as
important then as they became later."

#+REVEAL_HTML: </div><div align="right">
-- dmr, [[https://www.bell-labs.com/usr/dmr/www/chist.html][/The Development of the C Language/]]
#+REVEAL_HTML: </div>

#+BEGIN_NOTES
The PDP-11 was the new hotness.

It could operate on (8-bit) bytes and (16-bit) words. If your language only
operates on words ('cells'), string/char handling is awkward.

In B, pointers were indices into arrays rather than naked addresses. So scale
conversion would be needed at runtime.

DEC promised floating point capability in hardware! So the C compiler would need
to know about types in order to output the correct instructions.
#+END_NOTES

* What is a type?
#+REVEAL_HTML: </br>
#+ATTR_REVEAL: :frag (appear)
 - A way for the compiler to know what opcodes to output (dmr's motivation)?
 - The way data is stored (representational)?
 - Characterised by what operations are possible (behavioural)?
 - Determines the values that can be assigned?
 - Determines the meaning of the data?

* What is a type?
[[./int_bool_1.png]]
#+ATTR_REVEAL: :frag appear
[[./int_bool_2.png]]

* What is a type?
#+REVEAL_HTML: </br>
#+ATTR_REVEAL: :frag (appear)
 - The set of values that can inhabit an expression
   - may be finite or "infinite"
   - characterized by cardinality
 - Expressions have types
   - A program has a type

* Let's play a game
#+ATTR_REVEAL: :frag appear
To help us get thinking about types.

#+ATTR_REVEAL: :frag appear
I'll tell you a type.

#+ATTR_REVEAL: :frag appear
You tell me how many values it has.

* Level 1
#+REVEAL_HTML: </br>
Types as sets of values

* Level 1
How many values?
#+BEGIN_SRC cpp
bool;
#+END_SRC

#+ATTR_REVEAL: :frag appear
2 (~true~ and ~false~)

* Level 1
How many values?
#+BEGIN_SRC cpp
char;
#+END_SRC

#+ATTR_REVEAL: :frag appear
256

* Level 1
How many values?
#+BEGIN_SRC cpp
void;
#+END_SRC

#+ATTR_REVEAL: :frag appear
0

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC cpp
struct Foo { Foo() = delete; };
#+END_SRC

#+BEGIN_NOTES
cf BASIC's function vs procedure
#+END_NOTES

* Level 1
How many values?
#+BEGIN_SRC cpp
struct Foo {};
#+END_SRC

#+ATTR_REVEAL: :frag appear
1

* Level 1
How many values?
#+BEGIN_SRC cpp
enum class FireSwampDangers {
  FLAME_SPURTS,
  LIGHTNING_SAND,
  ROUSES
};
#+END_SRC

#+ATTR_REVEAL: :frag appear
3

* Level 1
How many values?
#+BEGIN_SRC cpp
template <typename T>
struct Foo {
  T m_t;
};
#+END_SRC

#+ATTR_REVEAL: :frag appear
~Foo~ has as many values as ~T~

* End of Level 1
Algebraically, a type is the number of values that inhabit it.

These types are equivalent:
#+BEGIN_SRC cpp
bool;

enum class InatorButtons {
  ON_OFF,
  SELF_DESTRUCT
};
#+END_SRC

#+ATTR_REVEAL: :frag appear
Let's move on to level 2.

* Level 2
#+REVEAL_HTML: </br>
Product Types

* Level 2
How many values?
#+BEGIN_SRC cpp
std::pair<char, bool>;
#+END_SRC

#+ATTR_REVEAL: :frag appear
256 * 2 = 512

* Level 2
How many values?
#+BEGIN_SRC cpp
struct Foo {
  char a;
  bool b;
};
#+END_SRC

#+ATTR_REVEAL: :frag appear
256 * 2 = 512

* Level 2
How many values?
#+BEGIN_SRC cpp
tuple<bool, bool, bool>;
#+END_SRC

#+ATTR_REVEAL: :frag appear
2 * 2 * 2 = 8

* Level 2
How many values?
#+BEGIN_SRC cpp
template <typename T, typename U>
struct Foo {
  T m_t;
  U m_u;
};
#+END_SRC

#+ATTR_REVEAL: :frag appear
(# of values in ~T~) * (# of values in ~U~)

* End of Level 2
When two types are "concatenated" into one compound type, we _multiply_ the # of
inhabitants of the components.

This kind of compounding gives us a _product type_.

#+ATTR_REVEAL: :frag appear
On to Level 3.

* Level 3
#+REVEAL_HTML: </br>
Sum Types

* Level 3
How many values?
#+BEGIN_SRC cpp
std::optional<char>;
#+END_SRC

#+ATTR_REVEAL: :frag appear
256 + 1 = 257

* Level 3
How many values?
#+BEGIN_SRC cpp
std::variant<char, bool>;
#+END_SRC

#+ATTR_REVEAL: :frag appear
256 + 2 = 258

* Level 3
How many values?
#+BEGIN_SRC cpp
template <typename T, typename U>
struct Foo {
  std::variant<T, U>;
}
#+END_SRC

#+ATTR_REVEAL: :frag appear
(# of values in ~T~) + (# of values in ~U~)

* End of Level 3
When two types are "alternated" into one compound type, we _add_ the # of
inhabitants of the components.

This kind of compounding gives us a _sum type_.

* Victory!

#+REVEAL_HTML: <br/><br/><div id="achv"><div class="achievement-banner"><div class="achievement-icon"><span class="icon"><span class="icon-trophy">&#127942;</span></span></div><div class="achievement-text"><p class="achievement-notification">ACHIEVEMENT UNLOCKED</p><p class="achievement-name">Algebraic Datatypes 101</p></div></div></div>

* Equivalences
#+BEGIN_SRC cpp
template <typename T>
struct Foo {
  std::variant<T, T> m_v;
};

template <typename T>
struct Bar {
  T m_t;
  bool m_b;
};
#+END_SRC

We have a choice over how to represent values. ~std::variant~ will quickly
become a very important tool for proper expression of states.

This is one reason why it's important that ~std::variant~ can't be empty, or at
least that an empty state is "meaningless".

#+BEGIN_NOTES
T + T = 2T.

But note that in ~Bar~, we need to manually keep the two variables "in sync".
#+END_NOTES

* Algebraic Datatypes
This is what it means to have an algebra of datatypes.

#+ATTR_REVEAL: :frag (appear)
 - the ability to reason about equality of types
 - to find equivalent formulations
   - more natural
   - more easily understood
   - more efficient
 - to identify mismatches between state spaces and the types used to implement
   them
 - to eliminate illegal states by making them inexpressible

#+ATTR_REVEAL: :frag appear
~std::variant~ has been a long time coming: this is why it will be so important.

* A Taste of Algebra with Datatypes
How many values?
#+BEGIN_SRC cpp
template <typename T>
class vector<T>;
#+END_SRC

#+ATTR_REVEAL: :frag appear
We can define a ~vector<T>~ recursively:

#+ATTR_REVEAL: :frag appear
${v(t)} = {1 + t v(t)}$

#+ATTR_REVEAL: :frag appear
(empty vector or (+) head element and (*) tail vector)

* A Taste of Algebra with Datatypes
And rearrange...

${v(t)} = {1 + t v(t)}$
#+ATTR_REVEAL: :frag appear
${v(t) - t v(t)} = {1}$
#+ATTR_REVEAL: :frag appear
${v(t) (1-t)} = {1}$
#+ATTR_REVEAL: :frag appear
${v(t)} = {{1} \over {1-t}}$

#+ATTR_REVEAL: :frag appear
What does that mean? Subtracting and dividing types?

* A Taste of Algebra with Datatypes
When we don't know how to interpret something mathematical?

${v(t)} = {{1} \over {1-t}}$

#+REVEAL_HTML: Let's <a href="http://www.wolframalpha.com/input/?i=1/(1-t)" data-preview-link>ask Wolfram Alpha</a>.

* A Taste of Algebra with Datatypes
Series expansion at ${t = 0}$:

${1 + t + t^2 + t^3 + t^4 +{ }...}$

#+ATTR_REVEAL: :frag appear
A ~vector<T>~ can have:
#+ATTR_REVEAL: :frag (appear)
 - 0 elements (${1}$)
 - or (+) 1 element (${t}$)
 - or (+) 2 elements (${t^2}$)
 - etc.

* Making Illegal States Unrepresentable
~std::variant~ is a game changer because it allows us to (more) properly express
types, so that (more) illegal states are unrepresentable.

It is hard to overestimate the change that ~std::variant~ will bring to C++.

And it is hard to overestimate what a missed opportunity ~std::variant~ would be
if it were allowed to be empty.

#+BEGIN_NOTES
C++'s type system is still not perfect by a long shot. But ~std::variant~ is an
amazing upgrade.
#+END_NOTES

* Example: Connection State
#+BEGIN_SRC cpp
enum class ConnectionState {
  DISCONNECTED,
  CONNECTING,
  CONNECTED,
  CONNECTION_INTERRUPTED
};

struct Connection {
  ConnectionState m_connectionState;

  std::string m_serverAddress;
  ConnectionId m_id;
  std::chrono::system_clock::time_point m_connectedTime;
  std::chrono::milliseconds m_lastPingTime;
  Timer m_reconnectTimer;
};
#+END_SRC

#+BEGIN_NOTES
A very simple example of what a connection class might look like today.

Functions interacting with this class would typically use a switch statement
over the ~ConnectionState~.

There are hidden invariants here that aren't enforced by the Connection type.

Some of the fields are dependent on the connection state (reconnect time, last
ping time). So it seems that some of these fields need sentinel values (eg
invalid connection id).

Worse, there is temptation to reuse fields for multiple states. Connected
timestamp is perhaps likely to get reused to mean the instant of connection and
the instant of disconnection.
#+END_NOTES

* Example: Connection State
#+BEGIN_SRC cpp
struct Connection {
  std::string m_serverAddress;

  struct Disconnected {};
  struct Connecting {};
  struct Connected {
    ConnectionId m_id;
    std::chrono::system_clock::time_point m_connectedTime;
    std::optional<std::chrono::milliseconds> m_lastPingTime;
  };
  struct ConnectionInterrupted {
    std::chrono::system_clock::time_point m_disconnectedTime;
    Timer m_reconnectTimer;
  };

  std::variant<Disconnected,
               Connecting,
               Connected,
               ConnectionInterrupted> m_connection;
};
#+END_SRC

#+BEGIN_NOTES
With types structured correctly, it's not possible to express illegal states.

e.g. Ping time does not exist if we're not connected.

(There are still things that are common to all states, e.g. perhaps this class
represents connection to a specific server.)

A switch statement could still exist, switching on the ~variant~'s ~index()~, or
a visitor-based approach could be used.
#+END_NOTES

* Example: Nullable field
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
class Friend {
  std::string m_alias;
  bool m_aliasPopulated;
  ...
};
#+END_SRC
These two fields need to be kept in sync everywhere.

#+BEGIN_NOTES
Here, a field is populated from a remote source and happens lazily and/or
asynchronously. It is possible that the field never gets populated.

All the code that deals with this field has to ensure that both variables are
kept up to date in sync with each other.
#+END_NOTES

* Example: Nullable field
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
class Friend {
  std::optional<std::string> m_alias;
  ...
};
#+END_SRC
~std::optional~ provides a sentinel value that is outside the type.

#+BEGIN_NOTES
~std::optional~ captures the true state space of the variable. It is not
possible for two fields to get out of step now.
#+END_NOTES

* Example: Monster AI
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
enum class AggroState {
  IDLE,
  CHASING,
  FIGHTING
};

class MonsterAI {
  AggroState m_aggroState;

  float m_aggroRadius;
  PlayerId m_target;
  Timer m_chaseTimer;
};
#+END_SRC

#+BEGIN_NOTES
Once again, presumably PlayerId has some invalid sentinel value.
#+END_NOTES

* Example: Monster AI
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
class MonsterAI {
  struct Idle {
    float m_aggroRadius;
  };
  struct Chasing {
    PlayerId m_target;
    Timer m_chaseTimer;
  };
  struct Fighting {
    PlayerId m_target;
  };

  std::variant<Idle, Chasing, Fighting> m_aggroState;
};
#+END_SRC

#+BEGIN_NOTES
Now the variables are properly placed into the states that use them.

Chasing and Fighting states could inherit from an Aggroed state that holds a target.
#+END_NOTES

* Example: Design Patterns
The addition of sum types to C++ offers an alternative formulation for some
design patterns.

 - Command
 - Composite
 - Interpreter
 - State

State machines and expressions are naturally modelled with sum types.

#+BEGIN_NOTES
Traditional runtime polymorphism approach can lead to bloated base class issue.

Type erasure is another way to go.

Sum types + visitor/pattern matching is a third possibility, particularly
natural for things like ASTs.

Sum types are especially good for representing expressions (think JSON).

The expression problem: easy to add new classes (use OO/interfaces) or new
operations (use sum types/visitors)?
#+END_NOTES

* Sum types vs Runtime Polymorphism
Runtime polymorphism (i.e. regular OO interface/implementation) allows manipulation of
heterogeneous state with a uniform interface.

Sum types allow manipulation of heterogenous state /and/ interface in a homogeneous way.

#+BEGIN_NOTES
This slide paraphrased from Andrei Alexandrescu's Dr Dobbs article, April 2002 (!)
#+END_NOTES

* Designing with Types
#+REVEAL_HTML: </br>
std::variant and std::optional are valuable tools that allow us to model the
state of our business logic more accurately.

When you match the types to the domain accurately, certain categories of tests
just disappear.

#+BEGIN_NOTES
You don't have to test the edge cases where the representation can fall outside
your reality - because that can't happen.
#+END_NOTES

* Designing with Types
#+REVEAL_HTML: </br>
Fitting types to their function more accurately makes code easier to understand
and removes pitfalls.

The bigger the codebase, the more vital the functionality, the more value in
correct representation with types.

#+BEGIN_NOTES
When illegal states are unrepresentable, you don't have to worry about other
programmers misunderstanding the code, or misusing data. In a sense, they
/cannot/ write something that is wrong.

And when I say "other programmers" of course I mean myself in 3 months...

Questionably reusing fields, bending semantics, etc. These are bad practices.
But they happen when we're chasing a deadline.
#+END_NOTES

* Using Types to Constrain Behaviour
#+REVEAL_HTML: </br>
An expressive type system with product and sum types allows us to model state
more accurately.

"Phantom types" is one technique that helps us to model the /behaviour/ of our
business logic in the type system. Illegal behaviour becomes a type error.

* Phantom Types: Before
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
std::string GetFormData();

std::string SanitizeFormData(const std::string&);

void ExecuteQuery(const std::string&);
#+END_SRC
An injection bug waiting to happen.

#+BEGIN_NOTES
Let's hope we don't meet little Bobby Tables, and that everywhere we execute a
query we remembered to sanitize the data provided by the user.

The type system is not helping us here. How can we use types to make sure that
we stay safe?
#+END_NOTES

* Phantom Types: The setup
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
struct FormData {
  explicit FormData(const string& input) : m_input(input) {}
  std::string m_input;
};

struct sanitized {};
struct unsanitized {};
#+END_SRC
~T~ is the "Phantom Type" here.

#+BEGIN_NOTES
Note that the template argument is unused. It exists _only_ for compile time
type checking. There is no runtime overhead.
#+END_NOTES

* Phantom Types: After
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
FormData<unsanitized> GetFormData();

std::optional<FormData<sanitized>>
SanitizeFormData(const FormData<unsanitized>&);

void ExecuteQuery(const FormData<sanitized>&);
#+END_SRC

#+BEGIN_NOTES
User input is born unsanitized.

It is impossible for us to execute unsanitized input. The compiler simply won't
compile it.

We've used types to help enforce the business logic.

This is something similar to a strong typedef, or what enum class effectively
does for integral types. This technique can also be used e.g. in a units
library.
#+END_NOTES

* Total Functions
#+REVEAL_HTML: </br>
A /total function/ is a function that is defined for all inputs in its domain.

#+ATTR_REVEAL: :frag appear
~template <typename T>
const T& min(const T& a, const T& b);~

#+ATTR_REVEAL: :frag appear
~float sqrt(float f);~

#+BEGIN_NOTES
We are straying into the realm of Concepts here.

I'm not saying that total is the same thing as "no preconditions". The type must
satisfy the requirements on it. But you can see that with functions like ~sqrt~
there is a clear mismatch between the type of the function and the actual type
of its domain.
#+END_NOTES

* Let's play another game
#+ATTR_REVEAL: :frag appear
To help us see how total functions with the right types can result in
unsurprising code.

#+ATTR_REVEAL: :frag appear
I'll give you a function signature with no names attached.

#+ATTR_REVEAL: :frag appear
You tell me what it's called... (and you'll even know how to implement it).

#+ATTR_REVEAL: :frag appear
The only rule... it must be a /total/ function.

#+BEGIN_NOTES
Assume regular types. But you needn't assume anything else.

And there are always ways to make things unexpected in C++. But assume nothing
surprising here.
#+END_NOTES

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
T f(T);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~identity~

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC cpp
int f(int);
#+END_SRC

#+BEGIN_NOTES
Note the odd situation here: we know more about ~f(T)~ than we do about
~f(int)~.
#+END_NOTES

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T, typename U>
T f(std::pair<T, U>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~first~

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
T f(bool, T, T);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~select~

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T, typename U>
U f(std::function<U(T)>, T);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~apply~ or ~call~

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
vector<T> f(vector<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~reverse~, ~shuffle~, ...

#+BEGIN_NOTES
For simplicity, I haven't written this signature in terms of iterators, but it
would be just the same.
#+END_NOTES

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
T f(vector<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
Not possible! It's a partial function - the ~vector~ might be empty.

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
optional<T> f(vector<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~head~

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T, typename U>
vector<U> f(std::function<U(T)>, vector<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~transform~ or ~map~

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
vector<T> f(function<bool(T)>, vector<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~remove_if~, ~partition~, ...

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename T>
T f(optional<T>);
#+END_SRC

#+ATTR_REVEAL: :frag appear
Not possible!

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename K, typename V>
V f(map<K, V>, K);
#+END_SRC

#+ATTR_REVEAL: :frag appear
Not possible! But, er...

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC cpp
V& std::map<K, V>::operator[](const K&);
#+END_SRC

* Name That Function
#+REVEAL_HTML: </br>
#+BEGIN_SRC cpp
template <typename K, typename V>
optional<V> f(map<K, V>, K);
#+END_SRC

#+ATTR_REVEAL: :frag appear
~lookup~

* What Just Happened?
I gave you /almost nothing/.

No variable names. No function names. No type names.

Just bare type signatures.

#+ATTR_REVEAL: :frag appear
You were able to tell me exactly what the functions should be called, and likely
knew instantly how to implement them.

#+ATTR_REVEAL: :frag appear
You will note that partial functions gave us some issues...

#+BEGIN_NOTES
Naming is one of the hardest problems in Comp Sci. Getting the types right is
much easier. And if your types model the logic properly, perhaps you have
"self-documenting code"?
#+END_NOTES

* Well-typed Functions
#+REVEAL_HTML: </br>
Writing /total functions/ with well-typed signatures can tell us a lot about
functionality.

Using types appropriately makes interfaces unsurprising, safer to use and harder
to misuse.

Total functions make more test categories vanish.

* About Testing...
In a previous talk, I talked about unit testing and in particular property-based testing.

#+ATTR_REVEAL: :frag appear
Effectively using types can reduce test code.

#+ATTR_REVEAL: :frag appear
Property-based tests say "for all values, this property is true".

#+ATTR_REVEAL: :frag appear
That is exactly what types /are/: universal quantifications about what can be
done with data.

#+ATTR_REVEAL: :frag appear
Types scale better than tests. Instead of TDD, maybe try TDD!

#+BEGIN_NOTES
C++'s type system isn't yet powerful enough to be able to say goodbye to tests,
but it is powerful enough that used effectively, we can reduce some of the
drudgery of writing tests.

Any time you're thinking something is true for all values, that's what a type
can do.
#+END_NOTES

* Further Down the Rabbit Hole
#+REVEAL_HTML: </br>
 - [[http://en.wikipedia.org/wiki/Algebraic_data_type][Algebraic data type]] (Wikipedia)
 - [[http://chris-taylor.github.io/blog/2013/02/10/the-algebra-of-algebraic-data-types/][The Algebra of Algebraic Data Types]] (blog)
 - [[http://https://www.youtube.com/watch?v=YScIPA8RbVE][The Algebra of Algebraic Data Types]] (video)
 - [[https://vimeo.com/14313378][Effective ML]] (Making Illegal States Unrepresentable)
 - [[http://www.infoq.com/presentations/Types-Tests][Types vs Tests]] (Strange Loop 2012)

* Thanks For Listening
Goals for Well-typed Code
 - Make illegal states unrepresentable
 - Use ~std::variant~ and ~std::optional~ for formulations that
   - are more natural
   - fit the business logic state better
 - Use phantom types for safety
   - Make illegal behaviour a compile error
 - Write total functions
   - Unsurprising behaviour
   - Easy to use, hard to misuse

"When in doubt, create a type" -- Martin Fowler
